<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>七度</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-05-10T14:53:38.840Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>XJ</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>写给最亲爱的霍彦希</title>
    <link href="http://yoursite.com/2018/05/10/%E5%86%99%E7%BB%99%E6%9C%80%E4%BA%B2%E7%88%B1%E7%9A%84%E9%9C%8D%E5%BD%A6%E5%B8%8C/"/>
    <id>http://yoursite.com/2018/05/10/写给最亲爱的霍彦希/</id>
    <published>2018-05-10T14:53:09.000Z</published>
    <updated>2018-05-10T14:53:38.840Z</updated>
    
    <content type="html"><![CDATA[<p>写了那么多全删了，只想说将来的打算全都围绕你展开，和你在一起是我最大的福气。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;写了那么多全删了，只想说将来的打算全都围绕你展开，和你在一起是我最大的福气。&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>必应壁纸下载</title>
    <link href="http://yoursite.com/2018/05/10/%E5%BF%85%E5%BA%94%E5%A3%81%E7%BA%B8%E4%B8%8B%E8%BD%BD/"/>
    <id>http://yoursite.com/2018/05/10/必应壁纸下载/</id>
    <published>2018-05-10T14:52:09.000Z</published>
    <updated>2018-05-12T13:52:42.842Z</updated>
    
    <content type="html"><![CDATA[<p>这是我写的必应壁纸下载python代码<br>这是必应壁纸的官方网站<a href="https://bing.ioliu.cn/" target="_blank" rel="noopener">https://bing.ioliu.cn/</a><br>官方网站的图片已经提供了下载方法，很容易分析出图片的下载地址，下面的代码就是最简单的网站请求机制</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python</span><br><span class="line">#-*-coding:utf-8-*-</span><br><span class="line">import urllib</span><br><span class="line">import urllib.request</span><br><span class="line">import re</span><br><span class="line">import os</span><br><span class="line">import time</span><br><span class="line">from multiprocessing import Pool</span><br><span class="line"></span><br><span class="line">img_down=[]</span><br><span class="line">name_down=[]</span><br><span class="line">file_save=&quot;&quot;</span><br><span class="line"></span><br><span class="line">def judge_file():</span><br><span class="line">    while True: </span><br><span class="line">        try:</span><br><span class="line">            global file_save</span><br><span class="line">            file_save=input(&quot;请输入保存文件路径，（例：D:/wallpaper）:&quot;)</span><br><span class="line">            if os.path.exists(file_save):</span><br><span class="line">                break</span><br><span class="line">            else:</span><br><span class="line">                os.makedirs(&apos;%s&apos;%file_save)</span><br><span class="line">                break</span><br><span class="line">        except:</span><br><span class="line">            print(&quot;文件路径不存在或格式错误，请重新输入！&quot;)</span><br><span class="line">    while True:</span><br><span class="line">        try:</span><br><span class="line">            download_image(file_save)</span><br><span class="line">        except:</span><br><span class="line">            pass</span><br><span class="line"></span><br><span class="line">def img_url_download():</span><br><span class="line">    url=&quot;https://bing.ioliu.cn/&quot;</span><br><span class="line">    url_head=&apos;https://bing.ioliu.cn&apos;</span><br><span class="line">    pattern=&apos;a class=&quot;ctrl download&quot; href=&quot;/photo/[A-z,0-9,-]&#123;0,&#125;[0-9]&#123;0,&#125;\?force=download&apos;</span><br><span class="line">    #pattern_num=&apos;i class=&quot;icon icon-prev&quot;&gt;上一页&lt;/i&gt;&lt;/a&gt;&lt;span&gt;1 / [0-9]&#123;0,&#125;&apos;</span><br><span class="line">    #原网页对显示的总页数已做改动</span><br><span class="line">    pattern_num=&apos;&lt;a href=&quot;/&quot;&gt;上一页&lt;/a&gt;&lt;span&gt;1 / ([0-9]&#123;0,&#125;)&lt;/span&gt;&apos;</span><br><span class="line">    pattern_name=&apos;&lt;h3&gt;(.*?)&lt;/h3&gt;&apos;        #&apos;&lt;h3&gt;[^\x00-\xff]&#123;0,&#125;&apos;</span><br><span class="line"></span><br><span class="line">    req = urllib.request.Request(url)</span><br><span class="line">    #print(req)</span><br><span class="line">    page = urllib.request.urlopen(req)</span><br><span class="line">    #time.sleep(1)</span><br><span class="line">    html=page.read()</span><br><span class="line"></span><br><span class="line">    #print(html.decode(&apos;utf-8&apos;))</span><br><span class="line">    match_num=re.findall(pattern_num,html.decode(&apos;utf-8&apos;))</span><br><span class="line"></span><br><span class="line">    print(match_num[0])</span><br><span class="line">    #sum_num=int(match_num[0].split(&quot; &quot;)[-1])</span><br><span class="line">    #此处所用正则做了改动</span><br><span class="line">    sum_num=int(match_num[0])</span><br><span class="line">    img_down=[]</span><br><span class="line">    name_down=[]</span><br><span class="line">    </span><br><span class="line">    for i in range(1,sum_num):</span><br><span class="line">        url=&quot;https://bing.ioliu.cn/?p=&quot;+str(i)</span><br><span class="line">        req = urllib.request.Request(url)</span><br><span class="line">        page = urllib.request.urlopen(req)</span><br><span class="line">        time.sleep(1)</span><br><span class="line">        html=page.read()</span><br><span class="line">        match_list=re.findall(pattern,html.decode(&apos;utf-8&apos;))</span><br><span class="line">        match_name=re.findall(pattern_name,html.decode(&apos;utf-8&apos;))</span><br><span class="line">        </span><br><span class="line">        for j in match_list:</span><br><span class="line">            img_down.append(url_head+j[30:])</span><br><span class="line">        for k in match_name:</span><br><span class="line">            name_down.append(k)</span><br><span class="line">        print(&quot;save address data %d&quot;%(100*i/(sum_num-1)),&quot;%&quot;,sep=&quot;&quot;)</span><br><span class="line">        </span><br><span class="line">        if(len(img_down)!=len(name_down)):</span><br><span class="line">            flag=input(&quot;程序在https://bing.ioliu.cn/?p=%d上匹配时出现了错误，是否继续？y/n\n&quot;%i)</span><br><span class="line">            while True:</span><br><span class="line">                if flag==&apos;y&apos;:</span><br><span class="line">                    break</span><br><span class="line">                elif flag==&apos;n&apos;:</span><br><span class="line">                    exit()</span><br><span class="line">                else:</span><br><span class="line">                    print(&quot;输入错误，请重新输入！&quot;)</span><br><span class="line">    return img_down,name_down</span><br><span class="line"></span><br><span class="line">def download(inf):</span><br><span class="line">    file_save,url,name=inf[0],inf[1],inf[2]</span><br><span class="line">    #urllib.request.urlretrieve(i,&apos;D:\wallpaper\%s.jpg&apos; %i[37:].split(&quot;?&quot;)[0])</span><br><span class="line">    if name.find(&apos;【&apos;)!=-1:</span><br><span class="line">        if name.find(&apos;（&apos;)!=-1:</span><br><span class="line">            urllib.request.urlretrieve(url,&apos;%s/%s.jpg&apos;%(file_save,name.split(&apos;（&apos;)[0][0:-1].split(&apos;】&apos;)[1]))</span><br><span class="line">        else:</span><br><span class="line">            urllib.request.urlretrieve(url,&apos;%s/%s.jpg&apos;%(file_save,name.split(&apos;(&apos;)[0][0:-1].split(&apos;】&apos;)[1]))</span><br><span class="line">    elif name.find(&apos;（&apos;)!=-1:</span><br><span class="line">        urllib.request.urlretrieve(url,&apos;%s/%s.jpg&apos;%(file_save,name.split(&apos;（&apos;)[0][0:-1]))</span><br><span class="line">    else:</span><br><span class="line">        urllib.request.urlretrieve(url,&apos;%s/%s.jpg&apos;%(file_save,name.split(&apos;(&apos;)[0][0:-1]))</span><br><span class="line">        #print(&quot;download picture %0.2f&quot;%(100*(i+1)/(length)),&quot;%&quot;,sep=&quot;&quot;)</span><br><span class="line">    #print(name.split(&apos;(&apos;)[0][0:-1])</span><br><span class="line"></span><br><span class="line">def download_image(file_save):</span><br><span class="line">    img_down,name_down=img_url_download()</span><br><span class="line">    length=len(img_down)</span><br><span class="line">    inf=[]</span><br><span class="line">    for i in range(0,length):</span><br><span class="line">        inf.append((file_save,img_down[i],name_down[i]))</span><br><span class="line">        </span><br><span class="line">    pool = Pool()</span><br><span class="line">    pool.map(download, inf)</span><br><span class="line">    pool.close()</span><br><span class="line">    pool.join()</span><br><span class="line">        </span><br><span class="line">if __name__==&apos;__main__&apos;:</span><br><span class="line">    start = time.clock()</span><br><span class="line">    judge_file()</span><br><span class="line">    time_cost = (time.clock() - start)</span><br><span class="line">    print(&quot;Time used:&quot;,time_cost)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这是我写的必应壁纸下载python代码&lt;br&gt;这是必应壁纸的官方网站&lt;a href=&quot;https://bing.ioliu.cn/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://bing.ioliu.cn/&lt;/a&gt;&lt;br&gt;官方网站的图片已经
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Habse安装</title>
    <link href="http://yoursite.com/2018/05/10/Ubuntu%E4%B8%8AHBase%E5%AE%89%E8%A3%85/"/>
    <id>http://yoursite.com/2018/05/10/Ubuntu上HBase安装/</id>
    <published>2018-05-10T14:51:09.000Z</published>
    <updated>2018-05-10T15:11:34.232Z</updated>
    
    <content type="html"><![CDATA[<p>此篇博文目前仅实现了一台服务器的安装，不涉及分布式安装部署，后续有需要的话会补充</p><p>系统是Ubuntu16.04的服务器版本（无图形化界面），实际操作时我用putty远程连接腾讯云服务器进行操作。</p><p>下面操作主要根据简书上的一篇博文进行，并加以详细说明。<br><a href="https://www.jianshu.com/p/a0463f31637d" target="_blank" rel="noopener">https://www.jianshu.com/p/a0463f31637d</a></p><p>写在最前，Java1.9.0版本对hbase编译成功，但运行时会出错，推荐使用Java1.8.0版本</p><p><strong>一：HBase的下载和安装</strong><br>第一步：下载</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget  mirrors.cnnic.cn/apache/hbase/1.4.0/hbase-1.4.0-bin.tar.gz</span><br></pre></td></tr></table></figure><p>注：1.4.0是HBase的版本，更根据不同的需要改写成其他版本，后续的操作与版本号要一致</p><p>第二步：解压</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar xzf  hbase-1.4.0-bin.tar.gz</span><br></pre></td></tr></table></figure><p><strong>二：Java的下载和安装</strong><br>HBase是需要Java的编译才能运行的，如果系统没有安装Java的话需要安装Java<br>验证是否有Java：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java</span><br></pre></td></tr></table></figure><p>如果没有的话根据提示把所有的包都安装好（有一系列的包，可以直接sudo apt install 包名1 包名2 包名3…）</p><p>安装好后输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure><p>查看是否安装成功<br>安装的目录在 /usr/lib/jvm/下</p><p><strong>三：HBase的配置</strong><br>第一步修改hbase环境配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /home/ubuntu/hbase-1.4.0/conf/</span><br></pre></td></tr></table></figure><p>注：ubuntu是你自己登录的用户名，可以在输入home后按table键直接补全</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi hbase-env.sh</span><br></pre></td></tr></table></figure><p>找到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export  JAVA_HOME=/newdisk/jdk1.8.0_111</span><br></pre></td></tr></table></figure><p>这行在原文件中使用“#”注释掉的</p><p>把“#”去掉后，把路径改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-amd64</span><br></pre></td></tr></table></figure><p>注：1.9.0的版本编译会失败，可能是版本不匹配的问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi hbase-site.xml</span><br></pre></td></tr></table></figure><p>把最后两行的内容替换掉，路径可以参考原博客<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">                &lt;name&gt;hbase.rootdir&lt;/name&gt;</span><br><span class="line">                &lt;value&gt;file:/home/ubuntu/&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">                &lt;name&gt;hbase.zookeeper.property.dataDir&lt;/name&gt;</span><br><span class="line">                &lt;value&gt;/home/ubuntu/&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></p><p>然后执行下面的命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /</span><br><span class="line">sudo vi ~/.bashrc</span><br></pre></td></tr></table></figure></p><p>在.bashrc文件的末尾加上下面的语句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export HBASE_HOME=/home/ubuntu/hbase-1.4.0</span><br><span class="line">export HBASE_CONF_DIR=$HBASE_HOME/conf</span><br><span class="line">export HBASE_CLASS_PATH=$HBASE_CONF_DIR</span><br><span class="line">export PATH=$PATH:$HBASE_HOME/bin</span><br></pre></td></tr></table></figure><p>保存退出后（按esc键，然后按输入”:wq”回车即可）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure></p><p>检查是否成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hbase -version</span><br></pre></td></tr></table></figure><p><strong>四：启动和停止HBase</strong><br>启动<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">start-hbase.sh</span><br></pre></td></tr></table></figure></p><p>停止</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stop-hbase.sh</span><br></pre></td></tr></table></figure><p><strong>五：进入HBase</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hbase shell</span><br></pre></td></tr></table></figure><p>其他命令可查看关于HBase操作的技术博客</p><p><strong>六：远程连接HBase</strong><br>这里提示一下思路：<br>通过<strong>thrift</strong>连接HBase，我使用python连接的，thrift好像也支持Java，这个我没有查。<br>具体连接的时候thrift也要先安装并启动服务，这个介绍的博文很多而且大多数都很正确，这里就不详细展开了<br>另外，基于thrift的一个python库叫做<strong>Happybase</strong>操作起来很简单很舒服。</p><p><strong>对了，Happybase源代码里有个错误，可参考</strong><br><a href="https://my.oschina.net/wolfoxliu/blog/856175" target="_blank" rel="noopener">https://my.oschina.net/wolfoxliu/blog/856175</a><br>或者<br><a href="http://blog.csdn.net/dechengtju/article/details/61197641" target="_blank" rel="noopener">http://blog.csdn.net/dechengtju/article/details/61197641</a><br>来安装thrift并改正happybase的源码</p><p><a href="https://yq.aliyun.com/articles/63207" target="_blank" rel="noopener">https://yq.aliyun.com/articles/63207</a><br>happybase简单操作</p><p><a href="http://happybase.readthedocs.io/en/latest/api.html#connection" target="_blank" rel="noopener">http://happybase.readthedocs.io/en/latest/api.html#connection</a><br>happybaseAPI调用文档</p><p><strong>2018.02.07更</strong><br><a href="https://my.oschina.net/wolfoxliu/blog/856175" target="_blank" rel="noopener">https://my.oschina.net/wolfoxliu/blog/856175</a><br>一篇适合刚刚入门的教程</p><p>昨天老师让我写个小demo，就是根据上面那个教程写的，只不过我用的事python3<br>注意要是你用python3写，安装happybase时需要用pip3安装，否则即使安装成功后也可能引用失败，在执行py文件是，用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 xxx.py</span><br></pre></td></tr></table></figure><p>来执行，接触到的数据库感觉大同小异，HBase存数据时就是存字符串，暂时就这些，有时间把demo放上来。</p><p>2018.03.28补充：<br>thriftserver重启命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hbase-daemon.sh start thrift</span><br></pre></td></tr></table></figure><p>在服务器重启（或异常终止）后thrift服务和hbase服务可能会关闭，执行下列命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hbase-daemon.sh start thrift</span><br><span class="line">start-hbase.sh</span><br></pre></td></tr></table></figure><p>2018.03.29更新：<br>几个demo</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">#创建表</span><br><span class="line">import happybase</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">connection = happybase.Connection(&apos;127.0.0.1&apos;, autoconnect=False)#这里是单机版的hbase</span><br><span class="line">connection.open()</span><br><span class="line"></span><br><span class="line">print(connection.tables())</span><br><span class="line">start_time=time.time()</span><br><span class="line">connection.create_table(</span><br><span class="line">    &apos;my_table_0324&apos;,</span><br><span class="line">    &#123;</span><br><span class="line">        &apos;cf1&apos;:dict(max_versions=10),</span><br><span class="line">        &apos;cf2&apos;:dict(max_versions=1, block_cache_enabled=False),</span><br><span class="line">        &apos;cf3&apos;:dict(),</span><br><span class="line">        &apos;cf4&apos;:dict(max_versions=10),</span><br><span class="line">        &apos;cf5&apos;:dict(max_versions=1, block_cache_enabled=False),</span><br><span class="line">        &apos;cf6&apos;:dict(),</span><br><span class="line">        &apos;cf7&apos;:dict(max_versions=10),</span><br><span class="line">        &apos;cf8&apos;:dict(max_versions=1, block_cache_enabled=False),</span><br><span class="line">        &apos;cf9&apos;:dict(),</span><br><span class="line">        &apos;cf10&apos;:dict(max_versions=10),</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">end_time=time.time()</span><br><span class="line">print(end_time-start_time)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">#插入数据</span><br><span class="line">import happybase</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">connection = happybase.Connection(&apos;127.0.0.1&apos;, autoconnect=False)</span><br><span class="line">connection.open()</span><br><span class="line"></span><br><span class="line">print(connection.tables())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">table = connection.table(&apos;my_table_0324&apos;)</span><br><span class="line"></span><br><span class="line">start_time=time.time()</span><br><span class="line">with table.batch(batch_size=100000) as bat: #10万条，每次插入一条</span><br><span class="line">    for i in range(100000):</span><br><span class="line">        bat.put(&apos;www.test&#123;&#125;.com&apos;.format(i),&#123;&apos;cf1:price&apos;:&apos;&#123;&#125;&apos;.format(i),&apos;cf2:price2&apos;:&apos;&#123;&#125;&apos;.format(i),&apos;cf3:price3&apos;:&apos;&#123;&#125;&apos;.format(i),&apos;cf4:price4&apos;:&apos;&#123;&#125;&apos;.format(i),&apos;cf5:price5&apos;:&apos;&#123;&#125;&apos;.format(i),&apos;cf6:price6&apos;:&apos;&#123;&#125;&apos;.format(i),&apos;cf7:price7&apos;:&apos;&#123;&#125;&apos;.format(i),&apos;cf8:price8&apos;:&apos;&#123;&#125;&apos;.format(i),&apos;cf9:price9&apos;:&apos;&#123;&#125;&apos;.format(i),&apos;cf10:price10&apos;:&apos;&#123;&#125;&apos;.format(i)&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">end_time=time.time()</span><br><span class="line">print(start_time)</span><br><span class="line">print(end_time)</span><br><span class="line">print(end_time-start_time)</span><br><span class="line"></span><br><span class="line">with open(&quot;time_0325.txt&quot;,&apos;a+&apos;) as f:</span><br><span class="line">        f.write(&quot;10_10&quot; + &quot;\n&quot;)</span><br><span class="line">        f.write(str(start_time) + &quot;\n&quot;)</span><br><span class="line">        f.write(str(end_time) + &quot;\n&quot;)</span><br><span class="line">        f.write(str(end_time-start_time) + &quot;\n&quot;)</span><br></pre></td></tr></table></figure><p>2018.04.15补充：<br>隐式执行代码：nohup python3 test1.py &gt; myout.file 2&gt;&amp;1 &amp;<br>其中”python3 test1.py”为正常执行的命令</p><p><strong>参考：</strong><br><a href="https://www.jianshu.com/p/a0463f31637d" target="_blank" rel="noopener">https://www.jianshu.com/p/a0463f31637d</a><br><a href="http://www.linuxidc.com/Linux/2015-08/122353.htm" target="_blank" rel="noopener">http://www.linuxidc.com/Linux/2015-08/122353.htm</a><br><a href="http://blog.csdn.net/dechengtju/article/details/61197641" target="_blank" rel="noopener">http://blog.csdn.net/dechengtju/article/details/61197641</a></p><p>增加几个关于在hbase中查询命令的网址：<br><a href="http://happybase.readthedocs.io/en/latest/api.html#table" target="_blank" rel="noopener">http://happybase.readthedocs.io/en/latest/api.html#table</a><br><a href="http://hbase.apache.org/book.html#thrift" target="_blank" rel="noopener">http://hbase.apache.org/book.html#thrift</a><br><a href="https://github.com/wbolster/happybase/blob/master/tests/test_api.py" target="_blank" rel="noopener">https://github.com/wbolster/happybase/blob/master/tests/test_api.py</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;此篇博文目前仅实现了一台服务器的安装，不涉及分布式安装部署，后续有需要的话会补充&lt;/p&gt;
&lt;p&gt;系统是Ubuntu16.04的服务器版本（无图形化界面），实际操作时我用putty远程连接腾讯云服务器进行操作。&lt;/p&gt;
&lt;p&gt;下面操作主要根据简书上的一篇博文进行，并加以详细说
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>外部排序(归并算法实现)</title>
    <link href="http://yoursite.com/2018/05/10/%E5%A4%96%E9%83%A8%E6%8E%92%E5%BA%8F--%E5%BD%92%E5%B9%B6%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2018/05/10/外部排序--归并算法实现/</id>
    <published>2018-05-10T14:48:09.000Z</published>
    <updated>2018-05-10T14:50:31.288Z</updated>
    
    <content type="html"><![CDATA[<p><strong>前提</strong>：在你看这篇文章之前假设你已经了解过外部排序的思想，所以在这里外部排序的基本原理就不加赘述了。</p><p><strong>基本要点</strong>：外部排序顾名思义是对外部存储空间中数据的排序，那为什么不能像选择排序、插入排序、快速排序那样也直接进行排序呢？原因是外部存储的数据量可能是非常大的，而计算机的内存大小要远远小于外存，计算机一下子读不了那么多数据，无法一次性对它们进行排序，这就是外部排序产生的原因。</p><p><strong>基本思想</strong>：</p><ol><li><p>我们这里借助归并排序的思想（这也是外部排序中最基本的思想，假设大家已经对归并排序有一定了解），假设我的一个文件中有10000个数据，而我的内存每次只能读2000个数据，那我先对文件预处理一下，将原文件切割成5个小文件，每个文件中有2000个有序数据（在读入内存2000个数据后，对数据排序后再写入到新文件中）。</p></li><li><p>然后我们开始进行文件合并（这里采用2-路归并）。先分别打开两个文件，分别读取文件的第一行数据，把数据较小的写入到一个新文件中，然后把数据较小的文件再往下读一行，直到两个文件中的数据全部有序地写到新文件中为止，这样原先5个2000个数据的文件变为2个4000个数据和1个2000个数据的文件。</p></li><li><p>重复步骤2，再次合并变为1个8000个数据和1个2000个数据的文件，再次合并变为1个10000个数据的文件。排序完成，原先有10000个数据的文件变得有序。</p></li></ol><p>下面是模拟外部排序的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line">#include&lt;time.h&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">#define MAXNUM 2000 </span><br><span class="line"></span><br><span class="line">int filenum;</span><br><span class="line">int filenumtemp;</span><br><span class="line">int filenumend;</span><br><span class="line"></span><br><span class="line">void CreatFile()</span><br><span class="line">&#123;</span><br><span class="line">FILE *f;</span><br><span class="line">f = fopen(&quot;test.txt&quot;, &quot;w+&quot;);</span><br><span class="line">srand((unsigned)time(NULL));</span><br><span class="line">for (int i = 0; i &lt; 10000; ++i)</span><br><span class="line">&#123;</span><br><span class="line">int temp = rand() % 100; //产生0-100的随机数</span><br><span class="line">fprintf(f, &quot;%d\n&quot;, temp);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">fclose(f);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void merge(int num[], int start, int mid, int end)</span><br><span class="line">&#123;</span><br><span class="line">int n1 = mid - start + 1;</span><br><span class="line">int n2 = end - mid;</span><br><span class="line">int *left, *right;</span><br><span class="line">left = (int*)malloc(n1 * sizeof(int));</span><br><span class="line">right = (int*)malloc(n2 * sizeof(int));</span><br><span class="line">int i, j, k;</span><br><span class="line"></span><br><span class="line">for (i = 0; i &lt; n1; i++)</span><br><span class="line">left[i] = num[start + i];</span><br><span class="line">for (j = 0; j &lt; n2; j++)</span><br><span class="line">right[j] = num[mid + 1 + j];</span><br><span class="line"></span><br><span class="line">i = j = 0;</span><br><span class="line">k = start;</span><br><span class="line">while (i &lt; n1 &amp;&amp; j &lt; n2)</span><br><span class="line">if (left[i] &lt; right[j])</span><br><span class="line">num[k++] = left[i++];</span><br><span class="line">else</span><br><span class="line">num[k++] = right[j++];</span><br><span class="line"></span><br><span class="line">while (i &lt; n1)</span><br><span class="line">num[k++] = left[i++];</span><br><span class="line"></span><br><span class="line">while (j &lt; n2)</span><br><span class="line">num[k++] = right[j++];</span><br><span class="line"></span><br><span class="line">free(left);</span><br><span class="line">free(right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void merge_sort(int num[], int start, int end)</span><br><span class="line">&#123;</span><br><span class="line">int mid;</span><br><span class="line">if (start &lt; end)</span><br><span class="line">&#123;</span><br><span class="line">mid = (start + end) / 2;</span><br><span class="line"></span><br><span class="line">merge_sort(num, start, mid);</span><br><span class="line">merge_sort(num, mid + 1, end);</span><br><span class="line">merge(num, start, mid, end);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void MergeFile()</span><br><span class="line">&#123;</span><br><span class="line">filenumtemp = 0;</span><br><span class="line">while (filenum != 1)</span><br><span class="line">&#123;</span><br><span class="line">while (filenumtemp &lt; filenum)</span><br><span class="line">&#123;</span><br><span class="line">if ((filenum - filenumtemp) == 1)</span><br><span class="line">&#123;</span><br><span class="line">FILE *f1, *f;</span><br><span class="line"></span><br><span class="line">char filename1[10] = &#123; &quot;&quot; &#125;;</span><br><span class="line">filenumtemp++;</span><br><span class="line">filename1[0] = filenumtemp + 48;</span><br><span class="line">strcat(filename1, &quot;.txt&quot;);</span><br><span class="line">f1 = fopen(filename1, &quot;r&quot;);</span><br><span class="line"></span><br><span class="line">filenumend++;</span><br><span class="line">char filename[10] = &#123; &quot;&quot; &#125;;</span><br><span class="line">filename[0] = filenumend + 48;</span><br><span class="line">strcat(filename, &quot;temp.txt&quot;);</span><br><span class="line">f = fopen(filename, &quot;w+&quot;);</span><br><span class="line"></span><br><span class="line">int num1;</span><br><span class="line">while (fscanf(f1, &quot;%d&quot;, &amp;num1) != EOF)</span><br><span class="line">&#123;</span><br><span class="line">fprintf(f, &quot;%d\n&quot;, num1);</span><br><span class="line">&#125;</span><br><span class="line">fclose(f1);</span><br><span class="line">fclose(f);</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">FILE *f1, *f2, *f;</span><br><span class="line">char filename1[10] = &#123; &quot;&quot; &#125;;</span><br><span class="line">filenumtemp++;</span><br><span class="line">filename1[0] = filenumtemp + 48;</span><br><span class="line">strcat(filename1, &quot;.txt&quot;);</span><br><span class="line">f1 = fopen(filename1, &quot;r&quot;);</span><br><span class="line"></span><br><span class="line">char filename2[10] = &#123; &quot;&quot; &#125;;</span><br><span class="line">filenumtemp++;</span><br><span class="line">filename2[0] = filenumtemp + 48;</span><br><span class="line">strcat(filename2, &quot;.txt&quot;);</span><br><span class="line">f2 = fopen(filename2, &quot;r&quot;);</span><br><span class="line"></span><br><span class="line">filenumend++;</span><br><span class="line">char filename[10] = &#123; &quot;&quot; &#125;;</span><br><span class="line">filename[0] = filenumend + 48;</span><br><span class="line">strcat(filename, &quot;temp.txt&quot;);</span><br><span class="line">f = fopen(filename, &quot;w+&quot;);</span><br><span class="line"></span><br><span class="line">int temp;</span><br><span class="line">int count = 0;</span><br><span class="line">int num1, num2;</span><br><span class="line">fscanf(f1, &quot;%d&quot;, &amp;num1);</span><br><span class="line">fscanf(f2, &quot;%d&quot;, &amp;num2);</span><br><span class="line">while (true)</span><br><span class="line">&#123;</span><br><span class="line">if (num1 &lt; num2)</span><br><span class="line">&#123;</span><br><span class="line">fprintf(f, &quot;%d\n&quot;, num1);</span><br><span class="line">if (fscanf(f1, &quot;%d&quot;, &amp;num1) == EOF)</span><br><span class="line">&#123;</span><br><span class="line">fprintf(f, &quot;%d\n&quot;, num2);</span><br><span class="line">while (fscanf(f2, &quot;%d&quot;, &amp;num2) != EOF)</span><br><span class="line">&#123;</span><br><span class="line">fprintf(f, &quot;%d\n&quot;, num2);</span><br><span class="line">&#125;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">fprintf(f, &quot;%d\n&quot;, num2);</span><br><span class="line">if (fscanf(f2, &quot;%d&quot;, &amp;num2) == EOF)</span><br><span class="line">&#123;</span><br><span class="line">fprintf(f, &quot;%d\n&quot;, num1);</span><br><span class="line">while (fscanf(f1, &quot;%d&quot;, &amp;num1) != EOF)</span><br><span class="line">&#123;</span><br><span class="line">fprintf(f, &quot;%d\n&quot;, num1);</span><br><span class="line">&#125;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">fclose(f1);</span><br><span class="line">fclose(f2);</span><br><span class="line">fclose(f);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">char filename1[10] = &#123; &quot;&quot; &#125;;</span><br><span class="line">char filename2[10] = &#123; &quot;&quot; &#125;;</span><br><span class="line">filename1[0] = filenumend + 48;</span><br><span class="line">filename2[0] = filenumend + 48;</span><br><span class="line">strcat(filename1, &quot;temp.txt&quot;);</span><br><span class="line">strcat(filename2, &quot;.txt&quot;);</span><br><span class="line"></span><br><span class="line">char filename3[10] = &#123; &quot;&quot; &#125;;</span><br><span class="line">char filename4[10] = &#123; &quot;&quot; &#125;;</span><br><span class="line">filename3[0] = filenumend * 2 - 1 + 48;</span><br><span class="line">filename4[0] = filenumend * 2 + 48;</span><br><span class="line">strcat(filename3, &quot;.txt&quot;);</span><br><span class="line">strcat(filename4, &quot;.txt&quot;);</span><br><span class="line"></span><br><span class="line">int r1 = remove(filename3);</span><br><span class="line">int r2 = remove(filename4);</span><br><span class="line">printf(&quot;r1=%d r2=%d\n&quot;, r1, r2);</span><br><span class="line">rename(filename1, filename2);</span><br><span class="line"></span><br><span class="line">//printf(&quot;filenum=%d filenumtemp=%d filenumend=%d\n&quot;, filenum, filenumtemp, filenumend);</span><br><span class="line">if (filenumtemp == filenum&amp;&amp;filenum != 1)</span><br><span class="line">&#123;</span><br><span class="line">filenum = filenumend;</span><br><span class="line">filenumtemp = 0;</span><br><span class="line">filenumend = 0;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">char filename1[20] = &#123; &quot;&quot; &#125;;</span><br><span class="line">char filename2[20] = &#123; &quot;&quot; &#125;;</span><br><span class="line">filename1[0] = 1 + 48;</span><br><span class="line">strcat(filename1, &quot;.txt&quot;);</span><br><span class="line">strcat(filename2, &quot;test_sort.txt&quot;);</span><br><span class="line">rename(filename1, filename2);</span><br><span class="line">printf(&quot;排序完成，有序序列保存在：test_sort.txt文件中\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void CreatTempFile(int temp[], int count)</span><br><span class="line">&#123;</span><br><span class="line">FILE *f;</span><br><span class="line">char filename[10] = &#123; &quot;&quot; &#125;;</span><br><span class="line">filename[0] = filenum + 48;</span><br><span class="line">strcat(filename, &quot;.txt&quot;);</span><br><span class="line">f = fopen(filename, &quot;w+&quot;);</span><br><span class="line">for (int i = 0; i &lt; count; ++i)</span><br><span class="line">&#123;</span><br><span class="line">fprintf(f, &quot;%d\n&quot;, temp[i]);</span><br><span class="line">&#125;</span><br><span class="line">fclose(f);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void SortFile()</span><br><span class="line">&#123;</span><br><span class="line">FILE *f;</span><br><span class="line">f = fopen(&quot;test.txt&quot;, &quot;r&quot;);</span><br><span class="line">int *temp;</span><br><span class="line">temp = (int *)malloc(MAXNUM * sizeof(int));</span><br><span class="line">char tempchar;</span><br><span class="line">int count = 0;</span><br><span class="line">while (fscanf(f, &quot;%d&quot;, &amp;temp[count])!=EOF)</span><br><span class="line">&#123;</span><br><span class="line">count++;</span><br><span class="line">if (count == MAXNUM)</span><br><span class="line">&#123;</span><br><span class="line">filenum++;</span><br><span class="line">merge_sort(temp, 0, count - 1);</span><br><span class="line">CreatTempFile(temp, count);</span><br><span class="line">count = 0;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if (count != 0)</span><br><span class="line">&#123;</span><br><span class="line">filenum++;</span><br><span class="line">CreatTempFile(temp, count);</span><br><span class="line">count = 0;</span><br><span class="line">&#125;</span><br><span class="line">fclose(f);</span><br><span class="line">free(temp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">CreatFile(); //生成10000个随机数存储在test.txt文件中</span><br><span class="line">SortFile(); //初次切割并排序为有序文件</span><br><span class="line">MergeFile(); //对文件进行归并排序</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注</strong>：使用败者树进行多路合并可加快文件的排序速度，这里只使用了2-路归并排序，对原文件的预处理排序可使用内部排序的任何一种算法，当然效率越快，排序稳定最好。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;前提&lt;/strong&gt;：在你看这篇文章之前假设你已经了解过外部排序的思想，所以在这里外部排序的基本原理就不加赘述了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;基本要点&lt;/strong&gt;：外部排序顾名思义是对外部存储空间中数据的排序，那为什么不能像选择排序、插入排序、快
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>python实现千图成像</title>
    <link href="http://yoursite.com/2018/05/10/python%E5%AE%9E%E7%8E%B0%E5%8D%83%E5%9B%BE%E6%88%90%E5%83%8F/"/>
    <id>http://yoursite.com/2018/05/10/python实现千图成像/</id>
    <published>2018-05-10T14:46:00.000Z</published>
    <updated>2018-05-10T14:47:39.280Z</updated>
    
    <content type="html"><![CDATA[<p>先放两张效果图：</p><p><img src="http://img.blog.csdn.net/20180115110025680?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcWlkdTE5OTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>左图是原图，右图是用很多张照片缩小再拼接后做出来的马赛克图，有时也把这个叫做千图成像</p><p><strong>原理</strong>：将原图片切割成一个一个的小块，用一个图库来比对和这张照片最相似的照片然后替换掉。<br>关于怎么找最相似的照片，有很多种方法，可以以阮前辈的博客作为启发点，这里采用的都是以颜色为基准，找到颜色最相似的照片，而未添加轮廓比较等算法。</p><p><strong>实现优化</strong>：这部分自己原先的打算是先读一下图库的照片存在一个文件中，每次访问这个文件比较图片信息，最后再将匹配效果最好的一张照片缩小后填入相应位置，但这种算法实现起来复杂度很高。例如，当图库较小而原图切割的块数比较大时，图片重复的次数比较多，每次缩放都要耗费大量的时间。最后看到了知乎上有位答主没有采取这种方式，而是另辟蹊径。先将图库中的所有照片缩放，然后读取这些缩放的照片的信息，用这些信息给照片命名。这样做的好处是，当马赛克块的大小一致是不需要在比对成功后重复缩放；另外，先缩放后再读取信息，遍历的像素点要少很多，一张1920<em>1080的照片缩放成192</em>108也会在复杂度上少算99倍。</p><p>下面使用了三种算法实现，HSV,RGB直接参考的知乎上的答主做了修改，颜色分布直方图算法（颜色向量）来自阮一峰前辈提过的一种算法。</p><p><strong>HSV</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br></pre></td><td class="code"><pre><span class="line">from PIL import Image, ImageOps</span><br><span class="line">from multiprocessing import Pool</span><br><span class="line">#from pathos.multiprocessing import ProcessingPoll as Pool</span><br><span class="line">import os</span><br><span class="line">import random</span><br><span class="line">from math import *</span><br><span class="line">from colorsys import rgb_to_hsv</span><br><span class="line">import time</span><br><span class="line">import sys</span><br><span class="line"></span><br><span class="line">#写在最前</span><br><span class="line"></span><br><span class="line">#马赛克画照片采用了三种不同的算法，效果较好，</span><br><span class="line">#效率较高的方法为HSV颜色空间模型算法</span><br><span class="line"></span><br><span class="line">#这部分代码为HSV颜色模型的实现代码</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#一些全局变量，在主函数中会根据需要改变</span><br><span class="line">IMAGE_DB_DIR = &quot;D:/Python/PyQt/课程设计/wallpaper&quot;</span><br><span class="line">IMAGE_DB_DIR_NEW = &quot;D:/Python/PyQt/课程设计/New_Ku/&quot;</span><br><span class="line"></span><br><span class="line">REP_DIS=3</span><br><span class="line"></span><br><span class="line">#下面两个变量为生成的图库的图片的大小</span><br><span class="line">#推荐值为16:9，实测效果较好值为4:3</span><br><span class="line">SIZE_WIDTH_db=4</span><br><span class="line">SIZE_HEIGHT_db=3</span><br><span class="line"></span><br><span class="line">#下面两个变量为生成的马赛克图片的的大小</span><br><span class="line">#推荐值为1920:1080</span><br><span class="line">SIZE_WIDTH=1920</span><br><span class="line">SIZE_HEIGHT=1080</span><br><span class="line"></span><br><span class="line">#进度条</span><br><span class="line">NUM=0</span><br><span class="line"></span><br><span class="line">def Cal_HSV(image):</span><br><span class="line">    width, height=image.size</span><br><span class="line">    pixels=image.load()</span><br><span class="line">    pixs=[]</span><br><span class="line">    for x in range(width):</span><br><span class="line">        for y in range(height):</span><br><span class="line">         pix=pixels[x, y]</span><br><span class="line">         pixs.append(pix)</span><br><span class="line">         </span><br><span class="line">    H=0; S=0; V=0</span><br><span class="line">    count=len(pixs)</span><br><span class="line">    for i in range(count): #对每个像素块求HSV的平均值</span><br><span class="line">        R=pixs[i][0]</span><br><span class="line">        G=pixs[i][1]</span><br><span class="line">        B=pixs[i][2]</span><br><span class="line">        hsv=rgb_to_hsv(R/255, G/255, B/255)</span><br><span class="line">        #将RGB格式转化为HSV格式</span><br><span class="line">        H+=hsv[0]</span><br><span class="line">        S+=hsv[1]</span><br><span class="line">        V+=hsv[2]</span><br><span class="line">    </span><br><span class="line">    HAvg=round(H/count, 3)</span><br><span class="line">    SAvg=round(S/count, 3)</span><br><span class="line">    VAvg=round(V/count, 3)</span><br><span class="line">    return (HAvg, SAvg, VAvg)</span><br><span class="line"></span><br><span class="line">def Find_Close(image, list_colors):</span><br><span class="line">    sim=sys.maxsize</span><br><span class="line">    for hsv in list_colors:</span><br><span class="line">        temp_sim=sqrt((image[0]-hsv[0])**2+(image[1]-hsv[1])**2+(image[2]-hsv[2])**2)</span><br><span class="line">        #print(temp_sim)</span><br><span class="line">        if temp_sim &lt; sim:</span><br><span class="line">            if hsv[3] &lt; REP_DIS:</span><br><span class="line">                sim=temp_sim</span><br><span class="line">                hsv_min=hsv</span><br><span class="line">                hsv[3]+=1</span><br><span class="line">            else:</span><br><span class="line">                hsv[3]=0</span><br><span class="line">    return tuple(hsv_min[0:3])</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">def progress_bar(width_now, height_now):</span><br><span class="line">    global NUM</span><br><span class="line">    if height_now==0:</span><br><span class="line">        NUM=round((width_now+SIZE_WIDTH_db)/(SIZE_WIDTH*SIZE_HEIGHT), 3)</span><br><span class="line">    else:</span><br><span class="line">        NUM=round(((height_now-1)*SIZE_WIDTH+width_now+SIZE_WIDTH_db)/(SIZE_WIDTH*SIZE_HEIGHT), 3)</span><br><span class="line">    return NUM</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">def Make_Mosaic(image, color_list):</span><br><span class="line">    print(&quot;生成图片中...&quot;)</span><br><span class="line">    print(&quot;生成的马赛克图片大小为&quot;, image.size)</span><br><span class="line">    width, height=image.size</span><br><span class="line">    count_images=round((width * height)/(SIZE_WIDTH_db*SIZE_HEIGHT_db))</span><br><span class="line">    #计算总共需要的马赛克块的数目，为了配合进度条使用</span><br><span class="line">    #images</span><br><span class="line">    new_image=Image.new(&apos;RGB&apos;, image.size)#, (255, 255, 255))</span><br><span class="line"></span><br><span class="line">    for y1 in range(0, height, SIZE_HEIGHT_db):</span><br><span class="line">        for x1 in range(0, width, SIZE_WIDTH_db):</span><br><span class="line">            y2=y1+SIZE_HEIGHT_db</span><br><span class="line">            x2=x1+SIZE_WIDTH_db</span><br><span class="line">            temp_image=image.crop((x1, y1, x2, y2))</span><br><span class="line">            hsv=Cal_HSV(temp_image)</span><br><span class="line">            close_image_name=Find_Close(hsv, color_list)</span><br><span class="line">            #print(close_image_name)</span><br><span class="line">            close_image_name=IMAGE_DB_DIR_NEW+str(close_image_name)+&apos;.jpg&apos;</span><br><span class="line">            paste_image=Resize_Image(close_image_name, SIZE_WIDTH_db, SIZE_HEIGHT_db)</span><br><span class="line">            #paste_image=Image.open(close_image_name)</span><br><span class="line">            new_image.paste(paste_image, (x1, y1))</span><br><span class="line">            &apos;&apos;&apos;</span><br><span class="line">            progress_bar(x1, y1)</span><br><span class="line">            &apos;&apos;&apos;</span><br><span class="line">    return new_image</span><br><span class="line"></span><br><span class="line">def Images_DIR():</span><br><span class="line">    paths=[]</span><br><span class="line">    for filename in os.listdir(IMAGE_DB_DIR):</span><br><span class="line">        image_temp_dir=IMAGE_DB_DIR+filename</span><br><span class="line">        paths.append((image_temp_dir, IMAGE_DB_DIR_NEW))</span><br><span class="line">    return paths</span><br><span class="line">def Resize_Image(in_name, size_width, size_height):</span><br><span class="line">    image=Image.open(in_name)</span><br><span class="line">    image=ImageOps.fit(image, (size_width, size_height), Image.ANTIALIAS)</span><br><span class="line">    return image</span><br><span class="line">def Convert_Image_HSV(inf):</span><br><span class="line">    #global IMAGE_DB_DIR_NEW</span><br><span class="line">    path=inf[0]</span><br><span class="line">    image_db_dir_new=inf[1]</span><br><span class="line">    image=Resize_Image(path, 160, 90)</span><br><span class="line">    #image=Resize_Image(path, SIZE_WIDTH_db, SIZE_HEIGHT_db)</span><br><span class="line">    hsv=Cal_HSV(image)</span><br><span class="line">    image.save(str(image_db_dir_new)+str(hsv)+&quot;.jpg&quot;)</span><br><span class="line">    #print(IMAGE_DB_DIR_NEW)</span><br><span class="line">    </span><br><span class="line">def Make_New_Image_DB():</span><br><span class="line">    print(&quot;生成配色方案中...&quot;)</span><br><span class="line">    paths=Images_DIR()</span><br><span class="line">    pool=Pool()</span><br><span class="line">    pool.map(Convert_Image_HSV, paths)</span><br><span class="line">    pool.close()</span><br><span class="line">    pool.join()</span><br><span class="line">def Read_Image_DB():</span><br><span class="line">    image_db=[]</span><br><span class="line">    for filename in os.listdir(IMAGE_DB_DIR_NEW):</span><br><span class="line">        if filename==&apos;None.jpg&apos;:</span><br><span class="line">            pass</span><br><span class="line">        else:</span><br><span class="line">            filename=filename.split(&apos;.jpg&apos;)[0]</span><br><span class="line">            filename=filename[1:-1].split(&apos;, &apos;)</span><br><span class="line">            filename=list(map(float, filename))</span><br><span class="line">            filename.append(0)</span><br><span class="line">            image_db.append(filename)</span><br><span class="line">    return image_db</span><br><span class="line"></span><br><span class="line">#该函数用于传参后判断参数是否正确</span><br><span class="line">#要判断九个变量，传参时只传两个非全局变量</span><br><span class="line">def Judge_Var():</span><br><span class="line">    print(&quot;验证变量中...&quot;)</span><br><span class="line">    if not os.path.exists(IMAGE_DB_DIR_NEW):</span><br><span class="line">        os.mkdir(IMAGE_DB_DIR_NEW[:-1])</span><br><span class="line">        #不取最后一个是为了除去&quot;/&quot;</span><br><span class="line">        #这步肯定要做异常处理，为了调试方便先不写</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">def Mosaic_Image_HSV(size_width_db,</span><br><span class="line">                 size_height_db,</span><br><span class="line">                 size_width,</span><br><span class="line">                 size_height,</span><br><span class="line">                 IMAGE_DIR,</span><br><span class="line">                 image_db_dir,</span><br><span class="line">                 rep_dis,</span><br><span class="line">                 COLOR_MODIFICATION</span><br><span class="line">                 ):</span><br><span class="line">    </span><br><span class="line">    #为了避免进程池不接受已改变的全局变量，在创建新图库成功后再改名为改变的图库的全局变量名</span><br><span class="line">    global SIZE_WIDTH_db, SIZE_HEIGHT_db, SIZE_WIDTH, SIZE_HEIGHT</span><br><span class="line">    global IMAGE_DB_DIR, IMAGE_DB_DIR_NEW, REP_DIS</span><br><span class="line">    </span><br><span class="line">    SIZE_WIDTH_db=size_width_db; SIZE_HEIGHT_db=size_height_db</span><br><span class="line">    SIZE_WIDTH=size_width; SIZE_HEIGHT=size_height</span><br><span class="line">    IMAGE_DB_DIR=image_db_dir</span><br><span class="line">    IMAGE_DB_DIR_NEW=image_db_dir[0:-1]+str(&quot;DB_HSV/&quot;)</span><br><span class="line">    IMAGE_SAVE_DIR=(&quot;马赛克图_HSV&quot;+&quot;.&quot;).join(IMAGE_DIR.split(&quot;.&quot;))</span><br><span class="line">    REP_DIS=rep_dis</span><br><span class="line">    #上述是修改七个全局变量的值</span><br><span class="line">    #使用这个程序目前需要九个参数，剩余两个参数是打开图片的路径和生成图片的保存路径</span><br><span class="line">    </span><br><span class="line">    #print(IMAGE_DB_DIR_NEW)</span><br><span class="line">    start_time=time.time()</span><br><span class="line">    Judge_Var()</span><br><span class="line">    Make_New_Image_DB()</span><br><span class="line">    </span><br><span class="line">    image_turn=Resize_Image(IMAGE_DIR, SIZE_WIDTH, SIZE_HEIGHT)</span><br><span class="line">    list_of_images=Read_Image_DB()</span><br><span class="line">    image_mosaic=Make_Mosaic(image_turn, list_of_images)</span><br><span class="line"></span><br><span class="line">    #下面是未和原图混合的，如果想要可以保留该照片</span><br><span class="line">    #image_mosaic.save(IMAGE_SAVE_DIR)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    #image_mosaic.save(&quot;D:/Python/PyQt/课程设计/Save_img/out96.jpg&quot;)</span><br><span class="line">    print(&quot;hhh&quot;)</span><br><span class="line">    image_mosaic_blend=Image.blend(image_mosaic, image_turn, COLOR_MODIFICATION)</span><br><span class="line">    print(&quot;hhh&quot;)</span><br><span class="line">    image_mosaic_blend.save(IMAGE_SAVE_DIR) #混合后的照片的保存</span><br><span class="line">    print(&quot;hhh&quot;)</span><br><span class="line">    end_time=time.time()</span><br><span class="line">    print(&quot;总耗时: %0.2f&quot; %(end_time-start_time))</span><br><span class="line">    print(&quot;生成的马赛克图片已保存为%s&quot;%IMAGE_SAVE_DIR)</span><br><span class="line">    </span><br><span class="line">if __name__ ==&apos;__main__&apos;:</span><br><span class="line">    Mosaic_Image_HSV(size_width_db=16, </span><br><span class="line">                 size_height_db=9, </span><br><span class="line">                 size_width=1920, </span><br><span class="line">                 size_height=1080, </span><br><span class="line">                 IMAGE_DIR=&quot;F:/课设一/ptemp/“森林”中的一只猫鼬.jpg&quot;, </span><br><span class="line">                 image_db_dir=&quot;D:/wallpaper/&quot;, </span><br><span class="line">                 rep_dis=3,</span><br><span class="line">                 COLOR_MODIFICATION=0.5</span><br><span class="line">                 )</span><br></pre></td></tr></table></figure></p><p><strong>RGB平均值</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br></pre></td><td class="code"><pre><span class="line">from PIL import Image, ImageOps</span><br><span class="line">from multiprocessing import Pool</span><br><span class="line">#from pathos.multiprocessing import ProcessingPoll as Pool</span><br><span class="line">import os</span><br><span class="line">import random</span><br><span class="line">from math import *</span><br><span class="line">import time</span><br><span class="line">import sys</span><br><span class="line"></span><br><span class="line">#写在最前</span><br><span class="line"></span><br><span class="line">#马赛克画照片采用了三种不同的算法，效果较好，</span><br><span class="line">#效率较高的方法为HSV颜色空间模型算法</span><br><span class="line"></span><br><span class="line">#这部分代码为RGB颜色模型的实现代码</span><br><span class="line"></span><br><span class="line">#一些全局变量，在主函数中会根据需要改变</span><br><span class="line">IMAGE_DB_DIR = &quot;D:/Python/PyQt/课程设计/wallpaper&quot;</span><br><span class="line">IMAGE_DB_DIR_NEW = &quot;D:/Python/PyQt/课程设计/New_Ku/&quot;</span><br><span class="line"></span><br><span class="line">REP_DIS=3</span><br><span class="line"></span><br><span class="line">#下面两个变量为生成的图库的图片的大小</span><br><span class="line">#推荐值为16:9，实测效果较好值为4:3</span><br><span class="line">SIZE_WIDTH_db=4</span><br><span class="line">SIZE_HEIGHT_db=3</span><br><span class="line"></span><br><span class="line">#下面两个变量为生成的马赛克图片的的大小</span><br><span class="line">#推荐值为1920:1080</span><br><span class="line">SIZE_WIDTH=1920</span><br><span class="line">SIZE_HEIGHT=1080</span><br><span class="line"></span><br><span class="line">def Cal_Color(image):</span><br><span class="line">    width, height=image.size</span><br><span class="line">    pixels=image.load()</span><br><span class="line">    pixs=[]</span><br><span class="line">    for x in range(width):</span><br><span class="line">        for y in range(height):</span><br><span class="line">            pix=pixels[x, y]</span><br><span class="line">            pixs.append(pix)</span><br><span class="line">    R=0; G=0; B=0</span><br><span class="line">    count=width*height</span><br><span class="line">    for x in range(count):</span><br><span class="line">        R+=pixs[x][0]</span><br><span class="line">        G+=pixs[x][1]</span><br><span class="line">        B+=pixs[x][2]</span><br><span class="line"></span><br><span class="line">    RAvg=round(R/count, 3)</span><br><span class="line">    GAvg=round(G/count, 3)</span><br><span class="line">    BAvg=round(B/count, 3)</span><br><span class="line">    return (RAvg, GAvg, BAvg)</span><br><span class="line"></span><br><span class="line">def Find_Close(image, list_colors):</span><br><span class="line">    sim=sys.maxsize</span><br><span class="line">    for color in list_colors:</span><br><span class="line">        temp_sim=abs(image[0]-color[0])+abs(image[1]-color[1])+abs(image[2]-color[2])</span><br><span class="line">        if temp_sim &lt; sim:</span><br><span class="line">            if color[3] &lt; REP_DIS:</span><br><span class="line">                sim=temp_sim</span><br><span class="line">                color_min=color</span><br><span class="line">                color[3] +=1</span><br><span class="line">            else:</span><br><span class="line">                color[3]=0</span><br><span class="line">    return tuple(color_min[0:3])</span><br><span class="line"></span><br><span class="line">def Make_Mosaic(image, color_list):</span><br><span class="line">    print(&quot;生成图片中...&quot;)</span><br><span class="line">    print(&quot;生成的马赛克图片大小为&quot;, image.size)</span><br><span class="line">    width, height=image.size</span><br><span class="line">    new_image=Image.new(&apos;RGB&apos;, image.size)</span><br><span class="line">    for y1 in range(0, height, SIZE_HEIGHT_db):</span><br><span class="line">        for x1 in range(0, width, SIZE_WIDTH_db):</span><br><span class="line">            y2=y1+SIZE_HEIGHT_db</span><br><span class="line">            x2=x1+SIZE_WIDTH_db</span><br><span class="line">            temp_image=image.crop((x1, y1, x2, y2))</span><br><span class="line">            color=Cal_Color(temp_image)</span><br><span class="line">            close_image_name=Find_Close(color, color_list)</span><br><span class="line">            close_image_name=IMAGE_DB_DIR_NEW + str(close_image_name) + &apos;.jpg&apos;</span><br><span class="line">            paste_image=Image.open(close_image_name)</span><br><span class="line">            paste_image = Resize_Image(close_image_name, SIZE_WIDTH_db, SIZE_HEIGHT_db)</span><br><span class="line">            new_image.paste(paste_image, (x1, y1))</span><br><span class="line">    return new_image</span><br><span class="line"></span><br><span class="line">def Images_DIR():</span><br><span class="line">    paths=[]</span><br><span class="line">    for filename in os.listdir(IMAGE_DB_DIR):</span><br><span class="line">        image_temp_dir=IMAGE_DB_DIR + filename</span><br><span class="line">        paths.append((image_temp_dir, IMAGE_DB_DIR_NEW))</span><br><span class="line">    return paths</span><br><span class="line">def Resize_Image(in_name, size_width, size_height):</span><br><span class="line">    image=Image.open(in_name)</span><br><span class="line">    image=ImageOps.fit(image, (size_width, size_height), Image.ANTIALIAS)</span><br><span class="line">    return image</span><br><span class="line">def Convert_Image_RGB(inf):</span><br><span class="line">    #global IMAGE_DB_DIR_NEW</span><br><span class="line">    path=inf[0]</span><br><span class="line">    image_db_dir_new=inf[1]</span><br><span class="line">    image=Resize_Image(path, 85, 85)</span><br><span class="line">    #image=Resize_Image(path, SIZE_WIDTH_db, SIZE_HEIGHT_db)</span><br><span class="line">    color=Cal_Color(image)</span><br><span class="line">    image.save(str(image_db_dir_new)+str(color)+&quot;.jpg&quot;)</span><br><span class="line">    #print(IMAGE_DB_DIR_NEW)</span><br><span class="line">    </span><br><span class="line">def Make_New_Image_DB():</span><br><span class="line">    print(&quot;生成配色方案中...&quot;)</span><br><span class="line">    paths=Images_DIR()</span><br><span class="line">    pool=Pool()</span><br><span class="line">    pool.map(Convert_Image_RGB, paths)</span><br><span class="line">    pool.close()</span><br><span class="line">    pool.join()</span><br><span class="line">def Read_Image_DB():</span><br><span class="line">    image_db=[]</span><br><span class="line">    for filename in os.listdir(IMAGE_DB_DIR_NEW):</span><br><span class="line">        if filename == &apos;None.jpg&apos;:</span><br><span class="line">            pass</span><br><span class="line">        else:</span><br><span class="line">            filename=filename.split(&apos;.jpg&apos;)[0]</span><br><span class="line">            filename=filename[1:-1].split(&apos;, &apos;)</span><br><span class="line">            filename=list(map(float, filename))</span><br><span class="line">            filename.append(0)</span><br><span class="line">            image_db.append(filename)</span><br><span class="line">    return image_db</span><br><span class="line"></span><br><span class="line">#该函数用于传参后判断参数是否正确</span><br><span class="line">#要判断九个变量，传参时只传两个非全局变量</span><br><span class="line">def Judge_Var():</span><br><span class="line">    print(&quot;验证变量中...&quot;)</span><br><span class="line">    if not os.path.exists(IMAGE_DB_DIR_NEW):</span><br><span class="line">        os.mkdir(IMAGE_DB_DIR_NEW[:-1])</span><br><span class="line">        #不取最后一个是为了除去&quot;/&quot;</span><br><span class="line">        #这步肯定要做异常处理，为了调试方便先不写</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">def Mosaic_Image_RGB(size_width_db, </span><br><span class="line">                 size_height_db, </span><br><span class="line">                 size_width, </span><br><span class="line">                 size_height, </span><br><span class="line">                 IMAGE_DIR, </span><br><span class="line">                 image_db_dir,  </span><br><span class="line">                 rep_dis,</span><br><span class="line">                 COLOR_MODIFICATION</span><br><span class="line">                 ):</span><br><span class="line">    </span><br><span class="line">    #为了避免进程池不接受已改变的全局变量，在创建新图库成功后再改名为改变的图库的全局变量名</span><br><span class="line">    global SIZE_WIDTH_db, SIZE_HEIGHT_db, SIZE_WIDTH, SIZE_HEIGHT</span><br><span class="line">    global IMAGE_DB_DIR, IMAGE_DB_DIR_NEW, REP_DIS</span><br><span class="line">    </span><br><span class="line">    SIZE_WIDTH_db=size_width_db; SIZE_HEIGHT_db=size_height_db</span><br><span class="line">    SIZE_WIDTH=size_width; SIZE_HEIGHT=size_height</span><br><span class="line">    IMAGE_DB_DIR=image_db_dir</span><br><span class="line">    IMAGE_DB_DIR_NEW=image_db_dir[0:-1]+str(&quot;DB_RGB/&quot;)</span><br><span class="line">    IMAGE_SAVE_DIR=(&quot;马赛克图_RGB&quot;+&quot;.&quot;).join(IMAGE_DIR.split(&quot;.&quot;))</span><br><span class="line">    REP_DIS=rep_dis</span><br><span class="line">    #上述是修改七个全局变量的值</span><br><span class="line">    #使用这个程序目前需要九个参数，剩余两个参数是打开图片的路径和生成图片的保存路径</span><br><span class="line">    start_time=time.time()</span><br><span class="line">    Judge_Var()</span><br><span class="line">    Make_New_Image_DB()</span><br><span class="line">    </span><br><span class="line">    image_turn=Resize_Image(IMAGE_DIR, SIZE_WIDTH, SIZE_HEIGHT)</span><br><span class="line">    list_of_images=Read_Image_DB()</span><br><span class="line">    image_mosaic=Make_Mosaic(image_turn, list_of_images)</span><br><span class="line">    #下面是未和原图混合的，如果想要可以保留该照片</span><br><span class="line">    #image_mosaic.save(IMAGE_SAVE_DIR)</span><br><span class="line">    #image_mosaic.save(&quot;D:/Python/PyQt/课程设计/Save_img/out96.jpg&quot;)</span><br><span class="line">    image_mosaic_blend=Image.blend(image_mosaic, image_turn, COLOR_MODIFICATION)</span><br><span class="line">    image_mosaic_blend.save(IMAGE_SAVE_DIR) #混合后的照片的保存</span><br><span class="line">    end_time=time.time()</span><br><span class="line">    print(&quot;总耗时: %0.2f&quot; %(end_time-start_time))</span><br><span class="line">    print(&quot;生成的马赛克图片已保存为%s&quot;%IMAGE_SAVE_DIR)</span><br><span class="line">    </span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    Mosaic_Image_RGB(size_width_db=16, </span><br><span class="line">                 size_height_db=9, </span><br><span class="line">                 size_width=1920, </span><br><span class="line">                 size_height=1080, </span><br><span class="line">                 IMAGE_DIR=&quot;D:/Python/PyQt/课程设计/Save_img/out96.jpg&quot;,</span><br><span class="line">                 image_db_dir=&quot;D:/wallpaper/&quot;, </span><br><span class="line">                 rep_dis=3,</span><br><span class="line">                 COLOR_MODIFICATION=0.5</span><br><span class="line">                 )</span><br></pre></td></tr></table></figure><p><strong>颜色向量法</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br></pre></td><td class="code"><pre><span class="line">from PIL import Image, ImageOps</span><br><span class="line">import numpy</span><br><span class="line">from multiprocessing import Pool</span><br><span class="line">#from pathos.multiprocessing import ProcessingPoll as Pool</span><br><span class="line">import os</span><br><span class="line">import random</span><br><span class="line">from math import *</span><br><span class="line">from colorsys import rgb_to_hsv</span><br><span class="line">import time</span><br><span class="line">import sys</span><br><span class="line"></span><br><span class="line">#写在最前</span><br><span class="line"></span><br><span class="line">#马赛克画照片采用了三种不同的算法，效果较好，</span><br><span class="line">#效率较高的方法为HSV颜色空间模型算法</span><br><span class="line"></span><br><span class="line">#这部分代码为HSV颜色模型的实现代码</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#一些全局变量，在主函数中会根据需要改变</span><br><span class="line">IMAGE_DB_DIR = &quot;D:/Python/PyQt/课程设计/wallpaper&quot;</span><br><span class="line">IMAGE_DB_DIR_NEW = &quot;D:/Python/PyQt/课程设计/New_Ku/&quot;</span><br><span class="line"></span><br><span class="line">REP_DIS=3</span><br><span class="line"></span><br><span class="line">#下面两个变量为生成的图库的图片的大小</span><br><span class="line">#推荐值为16:9，实测效果较好值为4:3</span><br><span class="line">SIZE_WIDTH_db=4</span><br><span class="line">SIZE_HEIGHT_db=3</span><br><span class="line"></span><br><span class="line">#下面两个变量为生成的马赛克图片的的大小</span><br><span class="line">#推荐值为1920:1080</span><br><span class="line">SIZE_WIDTH=1920</span><br><span class="line">SIZE_HEIGHT=1080</span><br><span class="line"></span><br><span class="line">#进度条</span><br><span class="line">NUM=0</span><br><span class="line"></span><br><span class="line">def Cal_Cos(list1,list2):</span><br><span class="line">    #print(&quot;hhh&quot;)</span><br><span class="line">    #print(list1,list2)</span><br><span class="line">    top_num=0</span><br><span class="line">    bottom_num1=0</span><br><span class="line">    bottom_num2=0</span><br><span class="line">    for i in range(0,27):</span><br><span class="line">        top_num+=int(list1[i]*list2[i])</span><br><span class="line">        bottom_num1+=int(list1[i])**2</span><br><span class="line">        bottom_num2+=int(list2[i])**2</span><br><span class="line">    bottom_num1=sqrt(bottom_num1)</span><br><span class="line">    bottom_num2=sqrt(bottom_num2)</span><br><span class="line">    if bottom_num1==0 or bottom_num2==0:</span><br><span class="line">        return 0</span><br><span class="line">    else:</span><br><span class="line">        return top_num/(bottom_num1*bottom_num2)</span><br><span class="line"></span><br><span class="line">def Cal_Histogram(image):</span><br><span class="line">    #judge_list=[63,127,191,255]</span><br><span class="line">    image_vector=[0 for i in range(27)]</span><br><span class="line">    width, height=image.size</span><br><span class="line">    pixels=image.load()</span><br><span class="line">    pixs=[]</span><br><span class="line">    for x in range(width):</span><br><span class="line">        for y in range(height):</span><br><span class="line">            pix=pixels[x, y]</span><br><span class="line">            image_vector[int(pix[0]/86)*9+int(pix[1]/86)*3+int(pix[2]/86)*1]+=1</span><br><span class="line">    return tuple(image_vector[0:27])</span><br><span class="line"></span><br><span class="line">    #return (HAvg, SAvg, VAvg)</span><br><span class="line"></span><br><span class="line">def Find_Close(image_vector, list_colors):</span><br><span class="line">    max_cos=0</span><br><span class="line">    length=len(list_colors)</span><br><span class="line">    #print(image_vector)</span><br><span class="line">    for histogram in list_colors:</span><br><span class="line">        #print(&quot;xxx&quot;)</span><br><span class="line">        #print(histogram)</span><br><span class="line">        temp_cos=Cal_Cos(list(image_vector), histogram)</span><br><span class="line">        if max_cos&lt;temp_cos:</span><br><span class="line">            max_cos=temp_cos</span><br><span class="line">            color_histogram=histogram</span><br><span class="line">            histogram[27]+=1</span><br><span class="line">        else:</span><br><span class="line">            histogram[27]=0</span><br><span class="line">    return tuple(color_histogram[0:27])</span><br><span class="line"></span><br><span class="line">def Make_Mosaic(image, color_list):</span><br><span class="line">    print(&quot;生成图片中...&quot;)</span><br><span class="line">    print(&quot;生成的马赛克图片大小为&quot;, image.size)</span><br><span class="line">    width, height=image.size</span><br><span class="line">    count_images=round((width * height)/(SIZE_WIDTH_db*SIZE_HEIGHT_db))</span><br><span class="line">    #计算总共需要的马赛克块的数目，为了配合进度条使用</span><br><span class="line">    #images</span><br><span class="line">    new_image=Image.new(&apos;RGB&apos;, image.size)#, (255, 255, 255))</span><br><span class="line"></span><br><span class="line">    for y1 in range(0, height, SIZE_HEIGHT_db):</span><br><span class="line">        for x1 in range(0, width, SIZE_WIDTH_db):</span><br><span class="line">            y2=y1+SIZE_HEIGHT_db</span><br><span class="line">            x2=x1+SIZE_WIDTH_db</span><br><span class="line">            temp_image=image.crop((x1, y1, x2, y2))</span><br><span class="line">            hsv=Cal_Histogram(temp_image)</span><br><span class="line">            close_image_name=Find_Close(hsv, color_list)</span><br><span class="line">            #print(close_image_name)</span><br><span class="line">            close_image_name=IMAGE_DB_DIR_NEW+str(close_image_name)+&apos;.jpg&apos;</span><br><span class="line">            paste_image=Resize_Image(close_image_name, SIZE_WIDTH_db, SIZE_HEIGHT_db)</span><br><span class="line">            #paste_image=Image.open(close_image_name)</span><br><span class="line">            new_image.paste(paste_image, (x1, y1))</span><br><span class="line">            &apos;&apos;&apos;</span><br><span class="line">            progress_bar(x1, y1)</span><br><span class="line">            &apos;&apos;&apos;</span><br><span class="line">    return new_image</span><br><span class="line"></span><br><span class="line">def Images_DIR():</span><br><span class="line">    paths=[]</span><br><span class="line">    for filename in os.listdir(IMAGE_DB_DIR):</span><br><span class="line">        image_temp_dir=IMAGE_DB_DIR+filename</span><br><span class="line">        paths.append((image_temp_dir, IMAGE_DB_DIR_NEW))</span><br><span class="line">    return paths</span><br><span class="line">def Resize_Image(in_name, size_width, size_height):</span><br><span class="line">    image=Image.open(in_name)</span><br><span class="line">    image=ImageOps.fit(image, (size_width, size_height), Image.ANTIALIAS)</span><br><span class="line">    return image</span><br><span class="line">def Convert_Image_Color_Histogram(inf):</span><br><span class="line">    #global IMAGE_DB_DIR_NEW</span><br><span class="line">    path=inf[0]</span><br><span class="line">    image_db_dir_new=inf[1]</span><br><span class="line">    image=Resize_Image(path, 160, 90)</span><br><span class="line">    #image=Resize_Image(path, SIZE_WIDTH_db, SIZE_HEIGHT_db)</span><br><span class="line">    color_histogram=Cal_Histogram(image)</span><br><span class="line">    image.save(str(image_db_dir_new)+str(color_histogram)+&quot;.jpg&quot;)</span><br><span class="line">    #print(IMAGE_DB_DIR_NEW)</span><br><span class="line">def Make_New_Image_DB():</span><br><span class="line">    print(&quot;生成配色方案中...&quot;)</span><br><span class="line">    paths=Images_DIR()</span><br><span class="line">    pool=Pool()</span><br><span class="line">    pool.map(Convert_Image_Color_Histogram, paths)</span><br><span class="line">    pool.close()</span><br><span class="line">    pool.join()</span><br><span class="line">def Read_Image_DB():</span><br><span class="line">    image_db=[]</span><br><span class="line">    for filename in os.listdir(IMAGE_DB_DIR_NEW):</span><br><span class="line">        if filename==&apos;None.jpg&apos;:</span><br><span class="line">            pass</span><br><span class="line">        else:</span><br><span class="line">            filename=filename.split(&apos;.jpg&apos;)[0]</span><br><span class="line">            filename=filename[1:-1].split(&apos;, &apos;)</span><br><span class="line">            filename=list(map(int, filename))</span><br><span class="line">            filename.append(0)</span><br><span class="line">            image_db.append(filename)</span><br><span class="line">    return image_db</span><br><span class="line"></span><br><span class="line">#该函数用于传参后判断参数是否正确</span><br><span class="line">#要判断九个变量，传参时只传两个非全局变量</span><br><span class="line">def Judge_Var():</span><br><span class="line">    print(&quot;验证变量中...&quot;)</span><br><span class="line">    if not os.path.exists(IMAGE_DB_DIR_NEW):</span><br><span class="line">        os.mkdir(IMAGE_DB_DIR_NEW[:-1])</span><br><span class="line">        #不取最后一个是为了除去&quot;/&quot;</span><br><span class="line">        #这步肯定要做异常处理，为了调试方便先不写</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">def Mosaic_Image_Color_Histogram(size_width_db,</span><br><span class="line">                 size_height_db,</span><br><span class="line">                 size_width,</span><br><span class="line">                 size_height,</span><br><span class="line">                 IMAGE_DIR,</span><br><span class="line">                 image_db_dir,</span><br><span class="line">                 rep_dis,</span><br><span class="line">                 COLOR_MODIFICATION</span><br><span class="line">                 ):</span><br><span class="line">    </span><br><span class="line">    #为了避免进程池不接受已改变的全局变量，在创建新图库成功后再改名为改变的图库的全局变量名</span><br><span class="line">    global SIZE_WIDTH_db, SIZE_HEIGHT_db, SIZE_WIDTH, SIZE_HEIGHT</span><br><span class="line">    global IMAGE_DB_DIR, IMAGE_DB_DIR_NEW, REP_DIS</span><br><span class="line">    </span><br><span class="line">    SIZE_WIDTH_db=size_width_db; SIZE_HEIGHT_db=size_height_db</span><br><span class="line">    SIZE_WIDTH=size_width; SIZE_HEIGHT=size_height</span><br><span class="line">    IMAGE_DB_DIR=image_db_dir</span><br><span class="line">    IMAGE_DB_DIR_NEW=image_db_dir[0:-1]+str(&quot;DB_CH/&quot;)</span><br><span class="line">    IMAGE_SAVE_DIR=(&quot;马赛克图_CH&quot;+&quot;.&quot;).join(IMAGE_DIR.split(&quot;.&quot;))</span><br><span class="line">    REP_DIS=rep_dis</span><br><span class="line">    #上述是修改七个全局变量的值</span><br><span class="line">    #使用这个程序目前需要九个参数，剩余两个参数是打开图片的路径和生成图片的保存路径</span><br><span class="line">    </span><br><span class="line">    #print(IMAGE_DB_DIR_NEW)</span><br><span class="line">    start_time=time.time()</span><br><span class="line">    Judge_Var()</span><br><span class="line">    Make_New_Image_DB()</span><br><span class="line">    </span><br><span class="line">    image_turn=Resize_Image(IMAGE_DIR, SIZE_WIDTH, SIZE_HEIGHT)</span><br><span class="line">    list_of_images=Read_Image_DB()</span><br><span class="line">    image_mosaic=Make_Mosaic(image_turn, list_of_images)</span><br><span class="line">    </span><br><span class="line">    #下面是未和原图混合的，如果想要可以保留该照片</span><br><span class="line">    #image_mosaic.save(IMAGE_SAVE_DIR)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    #image_mosaic.save(&quot;D:/Python/PyQt/课程设计/Save_img/out96.jpg&quot;)</span><br><span class="line">    image_mosaic_blend=Image.blend(image_mosaic, image_turn, COLOR_MODIFICATION)</span><br><span class="line">    image_mosaic_blend.save(IMAGE_SAVE_DIR) #混合后的照片的保存</span><br><span class="line">    end_time=time.time()</span><br><span class="line">    print(&quot;总耗时: %0.2f&quot; %(end_time-start_time))</span><br><span class="line">    print(&quot;生成的马赛克图片已保存为%s&quot;%IMAGE_SAVE_DIR)</span><br><span class="line">    </span><br><span class="line">if __name__ ==&apos;__main__&apos;:</span><br><span class="line">    Mosaic_Image_Color_Histogram(size_width_db=16, </span><br><span class="line">                 size_height_db=9, </span><br><span class="line">                 size_width=1920, </span><br><span class="line">                 size_height=1080, </span><br><span class="line">                 IMAGE_DIR=&quot;F:/课设一/ptemp/“森林”中的一只猫鼬.jpg&quot;,</span><br><span class="line">                 image_db_dir=&quot;D:/wallpaper/&quot;, </span><br><span class="line">                 rep_dis=3,</span><br><span class="line">                 COLOR_MODIFICATION=0.5</span><br><span class="line">                 )</span><br></pre></td></tr></table></figure><p><strong>其实这三段代码有很大一部分是重复的，可以直接封装成一个类</strong></p><p><strong>使用</strong>：调用Mosaic_Image_Color_Histogram（）函数，八个变量分别是马赛克块的长与宽，生成图片的长与宽，图片位置，图库位置，相同马赛克块的距离，颜色修改值。</p><p><strong>注意</strong>：这里的image_db_dir的路径的最后一定要加上“/”。</p><p><strong>缺点</strong>：rep_dis（相同马赛克块的距离）这里运算的方法是不对的，还有COLOR_MODIFICATION（颜色修改）这个变量是因为当马赛克块比较大时，不比较轮廓的缺点就暴露出来了，生成图片的效果很糟糕，所以就在生成照片后与原照片进行一次合并，这样的效果就会好很多。</p><p><strong>参考</strong>：</p><p><a href="http://www.ruanyifeng.com/blog/2011/07/principle_of_similar_image_search.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2011/07/principle_of_similar_image_search.html</a></p><p><a href="http://www.ruanyifeng.com/blog/2013/03/similar_image_search_part_ii.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2013/03/similar_image_search_part_ii.html</a></p><p><strong>感谢</strong>：</p><p>阮一峰：<br><a href="http://www.ruanyifeng.com/blog/（博客地址）" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/（博客地址）</a></p><p>知乎答主：</p><p>今晚的风儿很喧嚣（知乎ID），<br><a href="https://www.zhihu.com/people/CatchFish/activities（知乎地址）" target="_blank" rel="noopener">https://www.zhihu.com/people/CatchFish/activities（知乎地址）</a><br><a href="https://www.zhihu.com/question/27621722/answer/269085034（文章地址）" target="_blank" rel="noopener">https://www.zhihu.com/question/27621722/answer/269085034（文章地址）</a></p><p>显卡君hy（知乎ID），<br><a href="https://www.zhihu.com/people/xian-qia-jun-hy/activities（知乎地址），" target="_blank" rel="noopener">https://www.zhihu.com/people/xian-qia-jun-hy/activities（知乎地址），</a><br> <a href="https://link.zhihu.com/?target=http%3A//xianka.luobotou.org/%3Fp%3D54（文章地址）" target="_blank" rel="noopener">https://link.zhihu.com/?target=http%3A//xianka.luobotou.org/%3Fp%3D54（文章地址）</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;先放两张效果图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20180115110025680?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcWlkdTE5OTg=/font/5a6L5
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>我的第一篇文章</title>
    <link href="http://yoursite.com/2018/05/10/testtext/"/>
    <id>http://yoursite.com/2018/05/10/testtext/</id>
    <published>2018-05-10T14:26:09.000Z</published>
    <updated>2018-05-10T15:10:26.248Z</updated>
    
    <content type="html"><![CDATA[<p>你好，亲爱的霍彦希！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;你好，亲爱的霍彦希！&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/05/08/hello-world/"/>
    <id>http://yoursite.com/2018/05/08/hello-world/</id>
    <published>2018-05-08T12:44:38.608Z</published>
    <updated>2018-05-08T12:44:38.608Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
